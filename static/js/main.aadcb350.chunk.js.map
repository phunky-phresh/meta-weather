{"version":3,"sources":["components/styling/style.js","components/List.js","components/pages/Home.js","components/WeatherCard.js","components/pages/Forecast.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Title","h1","Sub","h3","Body","Form","form","Input","input","Button","Icon","img","Panel","Day","h4","P","p","Strong","span","Item","motion","List","props","initial","opacity","animate","transition","ease","duration","value","title","type","lattLong","Home","results","cities","map","city","onClick","handleCity","key","woeid","location_type","latt_long","DayCard","Card","daysOfWeek","forecast","weather","day","date","Date","applicable_date","dayIndex","getDay","y","src","weather_state_abbr","weather_state_name","min_temp","toFixed","max_temp","humidity","visibility","predictability","Forecast","useState","cityCode","cityInfo","setInfo","cityWeather","setWeather","useEffect","axios","get","then","res","info","data","consolidated_weather","catch","err","console","log","WeatherCard","style","margin","maxWidth","color","Search","onSubmit","handleSearch","htmlFor","className","placeholder","onfocus","onblur","search","handleInput","App","setCity","view","setView","setSearch","setResults","_handleInput","e","target","_handleSearch","preventDefault","getAttribute","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"ilFAIO,IAAMA,EAAUC,IAAOC,IAAV,KAGPC,EAAQF,IAAOG,GAAV,KAILC,EAAMJ,IAAOK,GAAV,KAKHC,EAAON,IAAOC,IAAV,KAOJM,EAAOP,IAAOQ,KAAV,KAYJC,EAAQT,IAAOU,MAAV,KAuBLC,EAASX,IAAOU,MAAV,KAkBNE,EAAOZ,IAAOa,IAAV,KAGJC,EAAQd,IAAOC,IAAV,KAWLc,EAAMf,IAAOgB,GAAV,KAIHC,EAAIjB,IAAOkB,EAAV,KAMDC,EAASnB,IAAOoB,KAAV,K,oVC/EnB,IAAMC,EAAOrB,YAAOsB,IAAOrB,IAAdD,CAAH,KAkBKuB,EAlCf,SAAcC,GAEV,OACI,kBAACH,EAAD,CACAI,QAAS,CAACC,QAAS,GACnBC,QAAS,CAAED,QAAS,GACpBE,WAAY,CAAEC,KAAM,SAAUC,SAAU,IACpCC,MAAOP,EAAMO,OAEb,wBAAIA,MAAOP,EAAMO,OAAQP,EAAMQ,OAC/B,uBAAGD,MAAOP,EAAMO,OAAO,kBAACZ,EAAD,CAAQY,MAAOP,EAAMO,OAArB,mBAAqDP,EAAMS,MAClF,uBAAGF,MAAOP,EAAMO,OAAO,kBAACZ,EAAD,CAAQY,MAAOP,EAAMO,OAArB,iBAAmDP,EAAMU,YCkB7EC,MA5Bf,SAAcX,GAGV,GAAIA,EAAMY,QACN,IACIC,EADUb,EAAMY,QACCE,KAAK,SAAAC,GAEtB,OAAO,yBACKC,QAAShB,EAAMiB,WACfC,IAAKH,EAAKI,OAEV,kBAAC,EAAD,CACIH,QAAShB,EAAMiB,WACfV,MAAOQ,EAAKI,MACZX,MAAOO,EAAKP,MACZC,KAAMM,EAAKK,cACXV,SAAUK,EAAKM,gBAKvC,OACI,kBAACvC,EAAD,KACK+B,I,4MCiBb,IAAMS,EAAU9C,YAAOsB,IAAOrB,IAAdD,CAAH,KASE+C,EAhDf,SAAcvB,GAEN,IAAMwB,EAAa,CAAC,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,OAG7DC,EADYzB,EAAM0B,QACCZ,KAAK,SAAAa,GAExB,IAAIC,EAAO,IAAIC,KAAKF,EAAIG,iBACpBC,EAAWH,EAAKI,SAEpB,OAAO,kBAACV,EAAD,CACCrB,QAAS,CAACC,QAAS,EAAG+B,EAAG,IACzB9B,QAAS,CAAED,QAAS,EAAG+B,EAAG,GAC1B7B,WAAY,CAAEC,KAAM,SAAUC,SAAU,GACxCY,IAAKU,GACD,kBAACrC,EAAD,KAAMiC,EAAWO,IACjB,kBAAC3C,EAAD,CAAM8C,IAAG,yDAAoDP,EAAIQ,mBAAxD,UACT,kBAAC1C,EAAD,KAAG,kBAACE,EAAD,KAASgC,EAAIS,qBAChB,kBAAC3C,EAAD,aAASkC,EAAIU,SAASC,QAAQ,GAA9B,WACA,kBAAC7C,EAAD,aAASkC,EAAIY,SAASD,QAAQ,GAA9B,KACA,kBAAC7C,EAAD,KAAG,kBAACE,EAAD,mBACH,kBAACF,EAAD,KAAIkC,EAAIa,SAAR,MACA,kBAAC/C,EAAD,KAAG,kBAACE,EAAD,qBACH,kBAACF,EAAD,KAAIkC,EAAIc,WAAWH,QAAQ,GAA3B,WACA,kBAAC7C,EAAD,KAAG,kBAACE,EAAD,yBACH,kBAACF,EAAD,KAAIkC,EAAIe,eAAR,UAOpB,OACI,kBAACpD,EAAD,KACKmC,ICOEkB,MAvCf,SAAkB3C,GAAQ,IAAD,EAEO4C,mBAAS5C,EAAMe,MAFtB,mBAEd8B,EAFc,aAGOD,mBAAS,OAHhB,mBAGdE,EAHc,KAGJC,EAHI,OAIaH,mBAAS,MAJtB,mBAIdI,EAJc,KAIDC,EAJC,KAuBrB,OAjBAC,qBAAU,WAEJL,GACFM,IAAMC,IAAN,mDAAsDP,IAAYQ,MAAK,SAACC,GACtE,IAAMC,EAAOD,EAAIE,KACX9B,EAAU4B,EAAIE,KAAKC,qBAEzBV,EAAQQ,GACRN,EAAWvB,MAEVgC,OAAO,SAAAC,GACRC,QAAQC,IAAIF,QAGb,IAGAX,EAOD,kBAAClE,EAAD,KACG,kBAACJ,EAAD,KAAQoE,EAAStC,MAAjB,aACA,kBAACsD,EAAD,CACGpC,QAASsB,KAPf,kBAAC,IAAD,CAAce,MAAO,CAACC,OAAQ,SAAUC,SAAU,OAAQxD,KAAM,OAAQyD,MAAO,W,OCZxEC,MAnBf,SAAgBnE,GAAQ,IAAD,EAEnB,OACI,6BACI,kBAACtB,EAAD,sBACA,kBAACE,EAAD,mCACA,kBAACG,EAAD,CAAMqF,SAAUpE,EAAMqE,cAClB,2BAAOC,QAAQ,iBACX,kBAACrF,GAAD,GAAOwB,KAAK,OAAO8D,UAAU,QAAQC,YAAY,mBACjDC,QAAQ,sBAAsBC,OAAO,uCADrC,qBAEK,QAFL,sBAEmB1E,EAAM2E,QAFzB,yBAE2C3E,EAAM4E,aAFjD,IAIJ,kBAACzF,EAAD,CAAQsB,KAAK,SAASF,MAAM,c,MCwD7BsE,MA9Df,WAAgB,IAAD,EAEejC,mBAAS,MAFxB,mBAENC,EAFM,KAEIiC,EAFJ,OAGWlC,mBAAS,MAHpB,mBAGNmC,EAHM,KAGAC,EAHA,OAIepC,mBAAS,IAJxB,mBAIN+B,EAJM,KAIEM,EAJF,OAKiBrC,mBAAS,MAL1B,mBAKNhC,EALM,KAKGsE,EALH,KAaPC,EAAe,SAACC,GACpBH,EAAUG,EAAEC,OAAO9E,QAGf+E,EAAgB,SAACF,GACrBA,EAAEG,iBACFpC,IAAMC,IAAN,iEAAoEuB,IAAUtB,MAAM,SAAAC,GAChF4B,EAAW5B,EAAIE,SAChBE,OAAO,SAAAC,GACRC,QAAQC,IAAIF,MAGdsB,EAAU,IACVD,EAAQ,OAIV,OAAKD,EAgBDA,EAEA,kBAACxG,EAAD,KACE,kBAAC,EAAD,CACE8F,aAAciB,EACdV,YAAaO,EACbR,OAAQA,IAEV,kBAAC,EAAD,CACE5D,KAAM8B,UATd,EAdI,kBAACtE,EAAD,KACE,kBAAC,EAAD,CACE8F,aAAciB,EACdV,YAAaO,EACbR,OAAQA,IAEV,kBAAC,EAAD,CACE1D,WA/BY,SAACmE,GACnB,IAAMjE,EAAQiE,EAAEC,OAAOG,aAAa,SACpCV,EAAQ3D,GACR6D,EAAQ,aA6BFpE,QAASA,MCtCC6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.aadcb350.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n//////////////\n//Styled components for App.js and Search.Js\nexport const Wrapper = styled.div`\n    height: 100%;\n`\nexport const Title = styled.h1`\n    margin: 0 auto;\n    text-align: center;\n`\nexport const Sub = styled.h3`\n    margin: 0 auto;\n    text-align: center;\n    color: #00a8cc;\n`\nexport const Body = styled.div`\n    max-width: 800px;\n    margin: 0 auto;\n    @media (max-width: 400px) {\n        padding: 0 10px;\n    }\n`\nexport const Form = styled.form`\n    margin: auto;\n    height: 100px;\n    width: 400px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    @media (max-width: 400px) {\n        width: 100%;\n        padding: 0 10px;\n    }\n`\nexport const Input = styled.input`\n    color: #a0a0a0;\n    width: 100%;\n    height: 30px;\n    // border-radius: 5px 0 0 5px;\n    border-style: none;\n    // background-color: #a0a0a0;\n    border-bottom: 1px solid #a0a0a0;\n    padding: 10px;\n    margin: 5px;\n    @media (max-width: 400px) {\n        width: 100%;\n        font-size: 20px;\n        height: 40px;\n    }\n    ::placeholder {\n        color: #a0a0a0;\n        font-size: 15px;\n    }\n    &:focus {\n        outline: none;\n    }\n`\nexport const Button = styled.input`\n    border-style: none;\n    height: 30px;\n    font-size: 15px;\n    // border-radius: 5px;\n    // background-color: #cfcfcf;\n    color: #a0a0a0;\n    &:hover {\n        color: #00a8cc;\n\n    }\n    @media (max-width: 400px) {\n        height: 40px;\n        font-size: 20px;\n    }\n`\n////////////////////\n// Style components for weatherCard\nexport const Icon = styled.img`\n    max-width: 80%;\n`\nexport const Panel = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    margin: 0 auto;\n    @media (max-width: 650px) {\n        flex-wrap: wrap;\n        \n    }\n`\n\nexport const Day = styled.h4`\n    color: #00a8cc;\n    font-size: 20px;\n`\nexport const P = styled.p`\n    margin: 5px auto;\n`\n////////////////////////\n// Styled components for List.js\n\nexport const Strong = styled.span`\n    color: black;\n    font-weight: bold;\n`","import React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nimport { Strong } from './styling/style';\nfunction List(props) {\n  \n    return(\n        <Item \n        initial={{opacity: 0}}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeIn\", duration: 0.5 }}\n            value={props.value}\n        >\n            <h4 value={props.value}>{props.title}</h4>\n            <p value={props.value}><Strong value={props.value}>Location Type: </Strong>{props.type}</p>\n            <p value={props.value}><Strong value={props.value}>Coordinates: </Strong>{props.lattLong}</p>\n        </Item>\n    );\n};\n\nconst Item = styled(motion.div)`\n    background-color: #e6e6e6;\n    margin: 5px auto;\n    max-width: 400px;\n    padding: 10px;\n    border-radius: 5px;\n    * {\n        margin: 0;\n    }\n    h4 {\n        font-size: 20px;\n    }\n    p {\n        font-size: 15px;\n        color: #00a8cc;\n    }\n`\n\nexport default List;","import React from 'react';\n\n\nimport List from '../List';\nimport {Body} from '../styling/style';\n\nfunction Home(props) {\n \n    // map function to produce search results\n    if (props.results) {\n        let results = props.results\n        var cities = results.map( city => {\n            \n            return <div \n                        onClick={props.handleCity} \n                        key={city.woeid}\n                    >\n                        <List \n                            onClick={props.handleCity} \n                            value={city.woeid}\n                            title={city.title}\n                            type={city.location_type}\n                            lattLong={city.latt_long}\n                        />\n                    </div>\n        })\n    }\n    return(\n        <Body>          \n            {cities}\n        </Body>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\n\nimport {Icon, Panel, Day, P, Strong} from './styling/style';\n\nfunction Card(props) {\n        //array daysOfWeek is used to generated day name from api applicable date\n        const daysOfWeek = ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'];\n    \n        const weather = props.weather;\n        var forecast = weather.map( day => {\n            // getDay returns an index value that can be used to replace date with day name\n            let date = new Date(day.applicable_date)\n            let dayIndex = date.getDay();\n            \n            return <DayCard \n                    initial={{opacity: 0, y: 50}}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ ease: \"easeIn\", duration: 1 }}\n                    key={date}>\n                        <Day>{daysOfWeek[dayIndex]}</Day>\n                        <Icon src={`https://www.metaweather.com/static/img/weather/${day.weather_state_abbr}.svg`} />\n                        <P><Strong>{day.weather_state_name}</Strong></P>\n                        <P>min: {day.min_temp.toFixed(2)}&#8451; </P>\n                        <P>max: {day.max_temp.toFixed(2)} </P>\n                        <P><Strong>Humidity </Strong></P>\n                        <P>{day.humidity}% </P>\n                        <P><Strong>Visibility </Strong></P>\n                        <P>{day.visibility.toFixed(2)} miles </P>\n                        <P><Strong>Predictability </Strong></P>\n                        <P>{day.predictability}% </P>\n                    </DayCard>\n        })\n  \n\n\n\n    return(\n        <Panel>          \n            {forecast}          \n        </Panel>\n    )\n};\n\nconst DayCard = styled(motion.div)`\n    margin: 5px auto;\n    @media (max-width: 650px) {\n        margin: 5px auto;\n        \n    }\n`\n\n\nexport default Card;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport ReactLoading from \"react-loading\";\n\nimport WeatherCard from '../WeatherCard';\n\nimport {Body, Title} from '../styling/style';\n\n\nfunction Forecast(props) {\n    \n    const [cityCode, setCity] = useState(props.city);\n    const [cityInfo, setInfo] = useState(null);\n    const [cityWeather, setWeather] = useState(null);\n    \n    useEffect(() => {\n      // once cityCode is passed, useEffect executes axios get request to fetch city data.\n      if (cityCode) {\n        axios.get(`https://www.metaweather.com/api/location/${cityCode}`).then((res) => {\n          const info = res.data;\n          const weather = res.data.consolidated_weather;\n          \n          setInfo(info);\n          setWeather(weather);\n          \n        }).catch( err => {\n          console.log(err);       \n        })\n      }\n      }, []);\n\n\n    if (!cityWeather) {\n      // loading animation rendered until weather data has been fetched from api and is ready to render\n      return(\n        <ReactLoading style={{margin: '0 auto', maxWidth: '20%'}} type={\"bars\"} color={\"black\"} />\n      )\n    }\n    return(\n        <Body>\n           <Title>{cityInfo.title} Forecast</Title>\n           <WeatherCard\n              weather={cityWeather}\n           />\n        </Body>\n    )\n}\n\nexport default Forecast;","import React from 'react';\n\nimport {Form, Input, Button, Title, Sub} from './styling/style';\n\nfunction Search(props) {\n        \n    return(\n        <div>\n            <Title>World Weather</Title>\n            <Sub>Powered by MetaWeather.com</Sub>\n            <Form onSubmit={props.handleSearch} >\n                <label htmlFor=\"Search Input\"></label>\n                    <Input type='text' className=\"input\" placeholder=\"Search Cities...\" \n                    onfocus=\"this.placeholder=''\" onblur=\"this.placeholder='Search Cities...'\"\n                    type=\"text\" value={props.search} onChange={props.handleInput}></Input>\n                \n                <Button type=\"submit\" value=\"Search\"/>\n            \n            </Form>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport Home from './components/pages/Home';\nimport Forecast from './components/pages/Forecast';\nimport axios from 'axios';\n\nimport Search from './components/Search';\n\nimport {Wrapper} from './components/styling/style';\nimport './App.css';\n\nfunction App() {\n\n  const [cityCode, setCity] = useState(null);\n  const [view, setView] = useState(null)\n  const [search, setSearch] = useState('');\n  const [results, setResults] = useState(null);\n\n  // _handleCity grabs the woeid value from the list items generated by api search.\n  const _handleCity = (e) => {\n    const woeid = e.target.getAttribute('value')\n    setCity(woeid);\n    setView('forecast')\n  }\n  const _handleInput = (e) => {\n    setSearch(e.target.value);\n  }\n  // _handleSearch performs api query to find matching cities\n  const _handleSearch = (e) => {\n    e.preventDefault();\n    axios.get(`https://www.metaweather.com/api/location/search/?query=${search}`).then( res => {\n        setResults(res.data);      \n    }).catch( err => {\n      console.log(err);\n      \n    })\n    setSearch('');\n    setView(null);\n}\n\n//conditional rendering of Home page and Forecast page. if View state is null, Home page is rendered for search results\n  if (!view) {\n    return(\n      <Wrapper>\n        <Search \n          handleSearch={_handleSearch}\n          handleInput={_handleInput}\n          search={search}\n        />\n        <Home\n          handleCity={_handleCity}\n          results={results}\n        />\n      </Wrapper>\n    )\n  }\n  // when view is not null, Forecast page is rendered with cities weather information\n  if (view) {\n    return(\n      <Wrapper>\n        <Search \n          handleSearch={_handleSearch}\n          handleInput={_handleInput}\n          search={search}\n        />\n        <Forecast\n          city={cityCode}\n        />\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}